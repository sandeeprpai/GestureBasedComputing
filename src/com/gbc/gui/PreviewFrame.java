/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Nov 25, 2011, 3:00:00 PM
 */
package com.gbc.gui;

import com.gbc.bean.ProcessedImageBean;
import com.gbc.image.process.ProcessImage;
import com.gbc.util.AppConstants;
import com.gbc.util.SetColorPanel;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.PixelGrabber;
import java.util.Date;
import java.util.logging.Level;
import javax.media.NoPlayerException;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Administrator
 */
public class PreviewFrame extends javax.swing.JFrame implements Runnable {

    /** Creates new form MainFrame */
    //  CaptureImage captureImage = null;
    Image image = null;
    Frame parent = null;
    public boolean isClosed = false;

    public PreviewFrame(Frame parent, boolean modal) {
        //super(parent, modal);
        this.parent = parent;
        if (AppConstants.isImageViewerOn == false) {
            AppConstants.isFingerTipOn = true;
        } else {
            AppConstants.isFingerTipOn = false;
        }
        try {
            UIManager.setLookAndFeel("com.jtattoo.plaf.mcwin.McWinLookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PreviewFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(PreviewFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(PreviewFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(PreviewFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        SwingUtilities.updateComponentTreeUI(this);
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().createImage(getClass().getResource("/icon/colour_22.png")));
        setLocationRelativeTo(null);
        new Thread(this).start();
        // captureImage = new CaptureImage(this);
        //imageLabel.setIcon(new ImageIcon("/c"));
        //imageLabel.setIcon(new ImageIcon(this.getClass().getResource("/tf/image1.jpg")));
        // imageLabel.updateUI();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        redPanel = new javax.swing.JPanel();
        greenPanel = new javax.swing.JPanel();
        bluePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Preview");
        setAlwaysOnTop(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        redPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        javax.swing.GroupLayout redPanelLayout = new javax.swing.GroupLayout(redPanel);
        redPanel.setLayout(redPanelLayout);
        redPanelLayout.setHorizontalGroup(
            redPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
        );
        redPanelLayout.setVerticalGroup(
            redPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        greenPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        javax.swing.GroupLayout greenPanelLayout = new javax.swing.GroupLayout(greenPanel);
        greenPanel.setLayout(greenPanelLayout);
        greenPanelLayout.setHorizontalGroup(
            greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
        );
        greenPanelLayout.setVerticalGroup(
            greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        bluePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        javax.swing.GroupLayout bluePanelLayout = new javax.swing.GroupLayout(bluePanel);
        bluePanel.setLayout(bluePanelLayout);
        bluePanelLayout.setHorizontalGroup(
            bluePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 44, Short.MAX_VALUE)
        );
        bluePanelLayout.setVerticalGroup(
            bluePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setPreferredSize(new java.awt.Dimension(680, 500));

        imageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                imageLabelMouseEntered(evt);
            }
        });
        imageLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                imageLabelMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(imageLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(redPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(greenPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bluePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bluePanel, greenPanel, redPanel});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(redPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(greenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bluePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {greenPanel, redPanel});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void imageLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabelMouseEntered
        // TODO add your handling code here:
        // System.out.println(evt.getX());
    }//GEN-LAST:event_imageLabelMouseEntered

    private void imageLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabelMouseMoved
        // TODO add your handling code here:
//        System.out.print("mouse x = " + evt.getX());
//        System.out.println("mouse y= " + evt.getY());
//        int x = evt.getX();
//        int y = evt.getY();
//        RGB rgb = getRGB(x, y, image);
//        if (rgb != null) {
//            System.out.println("Red:" + rgb.getRed() + " Green:" + rgb.getGreen() + " Blue:" + rgb.getBlue());
//            redLabel.setText("" + rgb.getRed());
//            greenLabel.setText("" + rgb.getGreen());
//            blueLabel.setText("" + rgb.getBlue());
//        }
//        widthLabel.setText("" + x);
//        heightLabel.setText("" + y);
    }//GEN-LAST:event_imageLabelMouseMoved

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("Closing..");
        isClosed = true;
        if (AppConstants.isImageViewerOn == false) {
            AppConstants.isFingerTipOn = true;
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new PreviewFrame(new JFrame(), true).setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bluePanel;
    private javax.swing.JPanel greenPanel;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel redPanel;
    // End of variables declaration//GEN-END:variables

    void setPic(ImageIcon icon) {
    }

    public void setPic(ImageIcon icon, Image image) {

        imageLabel.setIcon(icon);
        this.image = image;

    }

//    RGB getRGB(int x, int y, Image image) {
//        if (image != null) {
//            try {
//                PixelGrabber pixcellGraber = new PixelGrabber(this.image, x, y, 1, 1, true);
//                int[] pixcellBuffer = new int[pixcellGraber.getWidth() * pixcellGraber.getHeight()];
//                if (pixcellGraber.grabPixels()) {
//                    pixcellBuffer = (int[]) pixcellGraber.getPixels();
//                }
//
//                int red = 0;
//                int green = 0;
//                int blue = 0;
//
//                red = (pixcellBuffer[0] >> 16) & 0xff;
//                green = (pixcellBuffer[0] >> 8) & 0xff;
//                blue = (pixcellBuffer[0] & 0xff);
//                RGB rgb = new RGB();
//                rgb.setRed(red);
//                rgb.setGreen(green);
//                rgb.setBlue(blue);
//                return rgb;
//            } catch (InterruptedException ex) {
//                Logger.getLogger(PreviewFrame.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            return null;
//        }
//        return null;
//    }
    public void showException(Exception ex) {
        JOptionPane.showMessageDialog(this, "" + ex, "Error", JOptionPane.ERROR_MESSAGE);
    }

    @Override
    public void run() {
        // new Thread(new SetColorPanel(this)).start();
        while (!isClosed) {


            ProcessedImageBean pib = ProcessImage.processImage(AppConstants.lastCapturedImage);
            // if (AppConstants.lastProcessedImage.size() > 2) {
//                    for (int j = 0; AppConstants.lastProcessedImage.size() > AppConstants.MIN_BUFFER_SIZE; j++) {
//                        AppConstants.lastProcessedImage.remove(0);
//                    }
            //}
            //  System.out.println("Consuming from preview frame");
            // pib = AppConstants.lastProcessedImage.remove(0);
            if (pib != null) {
                // if (new Date().getTime() - pib.getDate().getTime() < 1000) {
                int ht = imageLabel.getHeight();
                int wd = imageLabel.getWidth();
                ImageIcon icon = new ImageIcon(pib.getImage().getScaledInstance(wd, ht, Image.SCALE_FAST));
                imageLabel.setIcon(icon);
                if (pib.getRedColorBean() != null) {
                    this.setBackgroundOfRedpanel(Color.red);
                } else {
                    this.setBackgroundOfRedpanel(Color.white);
                }
                if (pib.getGreenColorBean() != null) {
                    this.setBackgroundOfGreenpanel(Color.green);
                } else {
                    this.setBackgroundOfGreenpanel(Color.white);
                }
                if (pib.getBlueColorBean() != null) {
                    this.setBackgroundOfBluepanel(Color.blue);
                } else {
                    this.setBackgroundOfBluepanel(Color.white);
                }
                // }
            }
            // System.out.println("Supplied:" + AppConstants.supplied + " consumed:" + AppConstants.processedCount );
//               
//                     if (AppConstants.lastProcessedImage.size() == 1) {
//                            Thread.sleep(1000);
//                            AppConstants.delayForEachImageInSecond = 1000/AppConstants.noOfImagesPerSecond;
//                        } else {
//                            Thread.sleep(AppConstants.delayForEachImageInSecond );
//                            System.out.println("delay is " + AppConstants.delayForEachImageInSecond);
//                        }
//               
            try {
                if (AppConstants.lastProcessedImage.size() >= 1 && AppConstants.lastProcessedImage.size() <= 3) {
                    Thread.sleep(1000);
                } else {
                    Thread.sleep(AppConstants.delayForEachImageInSecond);
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(PreviewFrame.class.getName()).log(Level.SEVERE, null, ex);
//                }
            }

        }
    }

    public void setBackgroundOfRedpanel(Color color) {
        redPanel.setBackground(color);
    }

    public void setBackgroundOfGreenpanel(Color color) {
        greenPanel.setBackground(color);
    }

    public void setBackgroundOfBluepanel(Color color) {
        bluePanel.setBackground(color);
    }
}
